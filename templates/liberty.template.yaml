AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This Liberty template deploys an ASG behind an ELB load balancer in two private
  subnets. The cluster is configured to use an S3 bucket for storage **WARNING** This
  template creates EC2 instances and related resources. You will be billed for the
  AWS resources used if you create a stack from this template. (qs-1o2sf5bg5)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PublicSubnet1ID
          - PublicSubnet2ID
      - Label:
          default: Bastion Host Details
        Parameters:
          - KeyPairName
          - BastionSecurityGroupID
      - Label:
          default: Liberty Nodes Configuration
        Parameters:
          - LibertyInstanceType
          - LibertyNodesMinSize
          - LibertyNodesMaxSize
          - LibertyNodesDesiredCapacity
          - OperatorEmail
          - DeploySampleApp
      - Label:
          default: SSL Configuration
        Parameters:
          - ALBSSLCertificateARN
          - CloudFrontACMCertificateARN
          - HostedZoneName
          - CreateCloudFrontDistribution
          - LibertyCloudFrontCNAME
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
    ParameterLabels:
      ALBSSLCertificateARN:
        default: ARN of ACM certificate for Application Load Balancer
      BastionSecurityGroupID:
        default: Bastion Security Group ID
      CloudFrontACMCertificateARN:
        default: ARN of ACM Certificate for CloudFront
      CreateCloudFrontDistribution:
        default: Create a CloudFront Distribution?
      DeploySampleApp:
        default: Deploy Sample Application?
      HostedZoneName:
        default: Hosted Zone Name in Route 53 corresponding to the domain name of
          the web site
      KeyPairName:
        default: SSH Key Name
      LibertyCloudFrontCNAME:
        default: CloudFront CNAME Alias
      LibertyInstanceType:
        default: Liberty Servers Instance Type
      LibertyNodesDesiredCapacity:
        default: Liberty Nodes Desired Capacity
      LibertyNodesMaxSize:
        default: Liberty Nodes Max Size
      LibertyNodesMinSize:
        default: Liberty Nodes Min Size
      OperatorEmail:
        default: Operator Email
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      VPCID:
        default: VPC ID
Parameters:
  ALBSSLCertificateARN:
    Default: ''
    Description: '[Optional] The ARN of the SSL certificate to be used for the Application
      Load Balancer'
    Type: String
  BastionSecurityGroupID:
    Description: ID of the bastion host security group to enable SSH connections (e.g.,
      sg-7f16e910)
    Type: AWS::EC2::SecurityGroup::Id
  CloudFrontACMCertificateARN:
    AllowedPattern: ^$|(arn:aws:acm:)([a-z0-9/:-])*([a-z0-9])$
    Default: ''
    Description: >-
      [ Optional ] The AWS Certification Manager certificate ARN for the CloudFront
      distribution certificate - this certificate should be created in the us-east-1
      (N. Virginia) region and must reference the main domain name you use below.
    Type: String
  CreateCloudFrontDistribution:
    AllowedValues:
      - 'Yes'
      - 'No'
    ConstraintDescription: Select yes to create a CloudFront distribution
    Default: 'Yes'
    Description: Select "Yes" to create a CloudFront distribution (default), "No"
      to skip.
    Type: String
  DeploySampleApp:
    AllowedValues:
      - 'Yes'
      - 'No'
    ConstraintDescription: Select Yes to create a deploy sample app
    Default: 'No'
    Description: Select "Yes" to deploy a sample app, "No" to skip (default).
    Type: String
  HostedZoneName:
    AllowedPattern: ^$|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
    Default: ''
    Description: The domain name of a valid Hosted Zone on AWS.
    Type: String
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  LibertyCloudFrontCNAME:
    AllowedPattern: ^$|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
    Default: ''
    Type: String
    Description: >-
      Alternate Domain Name for CloudFront Distribution e.g. 'my-liberty-cf.example.com'.
      Required if CreateCloudFrontDistribution is set to yes. The provided cname alias
      must match the specified HostedZoneName.
  LibertyInstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
    ConstraintDescription: Must contain valid instance type
    Default: t2.micro
    Description: Type of EC2 instance for the Liberty instances
    Type: String
  LibertyNodesDesiredCapacity:
    Default: '2'
    Description: The desired capacity for the Liberty nodes Auto Scaling group
    Type: String
  LibertyNodesMaxSize:
    Default: '4'
    Description: The maximum size of the Auto Scaling group
    Type: String
  LibertyNodesMinSize:
    Default: '2'
    Description: The minimum size of the Auto Scaling group
    Type: String
  OperatorEmail:
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: Must be a valid email address.
    Description: Email address that notifications of any scaling operations will be
      sent to
    Type: String
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the Liberty (e.g.,
      subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the Liberty (e.g.,
      subnet-b1f432cd)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1ID:
    Description: ID of public subnet 1 in Availability Zone 1 for the ELB load balancer
      (e.g., subnet-9bc642ac)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: ID of public subnet 2 in Availability Zone 2 for the ELB load balancer
      (e.g., subnet-e3246d8e)
    Type: AWS::EC2::Subnet::Id
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-ibm-websphere-liberty/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  CreateCloudFrontDistribution: !Equals
    - !Ref 'CreateCloudFrontDistribution'
    - 'Yes'
  DeploySampleApp: !Equals
    - !Ref 'DeploySampleApp'
    - 'Yes'
  UseALBSSL: !Not
    - !Equals
      - !Ref 'ALBSSLCertificateARN'
      - ''
  UseCustomCloudFrontSSL: !Not
    - !Equals
      - !Ref 'CloudFrontACMCertificateARN'
      - ''
Rules:
  KeyPairsNotEmpty:
    Assertions:
      - Assert: !Not
          - !EachMemberEquals
            - !RefAll 'AWS::EC2::KeyPair::KeyName'
            - ''
        AssertDescription: All key pair parameters must not be empty
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC
  ValidateHostedZone:
    RuleCondition: !Not
      - !Equals
        - !Ref 'ALBSSLCertificateARN'
        - ''
    Assertions:
      - Assert: !Not
          - !Equals
            - !Ref 'HostedZoneName'
            - ''
        AssertDescription: Route53 Hosted Zone Name is mandatory when ACM certificate
          is used
  ValidateCloudFrontSSL:
    RuleCondition: !Not
      - !Equals
        - !Ref 'CloudFrontACMCertificateARN'
        - ''
    Assertions:
      - Assert: !Not
          - !Equals
            - !Ref 'ALBSSLCertificateARN'
            - ''
        AssertDescription: ACM Certificate is mandatory for Application Load Balancer
          when ACM certificate is used for CloudFront
      - Assert: !Not
          - !Equals
            - !Ref 'LibertyCloudFrontCNAME'
            - ''
        AssertDescription: LibertyCloudFrontCNAME is mandatory when ACM certificate
          is used for CloudFront
Mappings:
  AWSAMIRegionMap:
    AMI:
      AMZNLINUXHVM: amzn-ami-hvm-2018.03.0.20190611-x86_64-gp2
    ap-northeast-1:
      AMZNLINUXHVM: ami-02ddf94e5edc8e904
    ap-northeast-2:
      AMZNLINUXHVM: ami-0ecd78c22823e02ef
    ap-south-1:
      AMZNLINUXHVM: ami-05695932c5299858a
    ap-southeast-1:
      AMZNLINUXHVM: ami-043afc2b8b6cfba5c
    ap-southeast-2:
      AMZNLINUXHVM: ami-01393ce9a3ca55d67
    ca-central-1:
      AMZNLINUXHVM: ami-0fa94ecf2fef3420b
    eu-central-1:
      AMZNLINUXHVM: ami-0ba441bdd9e494102
    eu-west-1:
      AMZNLINUXHVM: ami-0e61341fa75fcaa18
    eu-west-2:
      AMZNLINUXHVM: ami-050b8344d77081f4b
    sa-east-1:
      AMZNLINUXHVM: ami-05b7dbc290217250d
    us-east-1:
      AMZNLINUXHVM: ami-0e2ff28bfb72a4e45
    us-east-2:
      AMZNLINUXHVM: ami-0998bf58313ab53da
    us-west-1:
      AMZNLINUXHVM: ami-021bb9f371690f97a
    us-west-2:
      AMZNLINUXHVM: ami-079f731edfe27c29c
Resources:
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref 'OperatorEmail'
          Protocol: email
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to the ELB
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - !If
          - UseALBSSL
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: '0.0.0.0/0'
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: '0.0.0.0/0'
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref 'PublicSubnet1ID'
        - !Ref 'PublicSubnet2ID'
      SecurityGroups:
        - !Ref 'ELBSecurityGroup'
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ALBTargetGroup'
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: !If
        - UseALBSSL
        - 443
        - 80
      Protocol: !If
        - UseALBSSL
        - HTTPS
        - HTTP
      Certificates:
        - !If
          - UseALBSSL
          - CertificateArn: !Ref 'ALBSSLCertificateARN'
          - !Ref 'AWS::NoValue'
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: !If
        - UseALBSSL
        - 9443
        - 9080
      Protocol: !If
        - UseALBSSL
        - HTTPS
        - HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'VPCID'
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'
  LibertyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: !Sub
                  - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
  LibertyProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'LibertyRole'
  LibertySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to the Liberty instances
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - !If
          - UseALBSSL
          - IpProtocol: tcp
            FromPort: '9443'
            ToPort: '9443'
            SourceSecurityGroupId: !Ref 'ELBSecurityGroup'
          - IpProtocol: tcp
            FromPort: '9080'
            ToPort: '9080'
            SourceSecurityGroupId: !Ref 'ELBSecurityGroup'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref 'BastionSecurityGroupID'
  LibertyASLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref 'LibertyRole'
          buckets: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - install
            - configure
            - startServer
          quickstartwithSSL:
            - install
            - configureSSL
            - startServer
          quickstartwithSampleapp:
            - install
            - configure
            - deploySampleApp
            - startServer
          quickstartwithSSLandSampleapp:
            - install
            - configureSSL
            - deploySampleApp
            - startServer
        install:
          sources:
            /opt/websphere: https://repo1.maven.org/maven2/com/ibm/websphere/appserver/runtime/wlp-webProfile7/17.0.0.2/wlp-webProfile7-17.0.0.2.zip
          files:
            /etc/profile.d/wlp.sh:
              source:
                !Sub
                  - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/wlp.sh'
                  - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                    S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
            /etc/init.d/wlp:
              source:
                !Sub
                  - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/wlp'
                  - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                    S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: '000700'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/01_create_liberty_server.sh:
              source:
                !Sub
                  - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/createServer.sh'
                  - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                    S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            '01_create_Server':
              command: /tmp/01_create_liberty_server.sh
        configure:
          files:
            /tmp/02_configureServer.sh:
              source:
                !Sub
                  - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/configureServer.sh'
                  - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                    S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            '02_configure_Server':
              command: /tmp/02_configureServer.sh
        configureSSL:
          files:
            /tmp/02_configureServerSSL.sh:
              source:
                !Sub
                  - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/configureServerSSL.sh'
                  - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                    S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            '02_configure_Server':
              command: /tmp/02_configureServerSSL.sh
        deploySampleApp:
          files:
            /tmp/ferret-1.0.war:
              source: https://repo1.maven.org/maven2/net/wasdev/wlp/sample/ferret/1.0/ferret-1.0.war
              mode: '000544'
              owner: root
              group: root
            /tmp/03_deploySampleApp.sh:
              source:
                !Sub
                  - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/deploySampleApp.sh'
                  - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                    S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            '03_deploy_sample_app':
              command: /tmp/03_deploySampleApp.sh
        startServer:
          files:
            /tmp/04_startServer.sh:
              source:
                !Sub
                  - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/startServer.sh'
                  - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                    S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            '04_start_Server':
              command: /tmp/04_startServer.sh
        cleanup: {}
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - AMZNLINUXHVM
      InstanceMonitoring: 'true'
      IamInstanceProfile: !Ref 'LibertyProfile'
      InstanceType: !Ref 'LibertyInstanceType'
      SecurityGroups:
        - !Ref 'LibertySecurityGroup'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - "export PATH=$PATH:/usr/local/bin\n"
            - "which pip &> /dev/null\n"
            - "if [ $? -ne 0 ] ; then\n"
            - "    echo \"PIP NOT INSTALLED\"\n"
            - "    [ `which yum` ] && $(yum install -y epel-release; yum install -y\
              \ python-pip) && echo \"PIP INSTALLED\"\n"
            - "    [ `which apt-get` ] && apt-get -y update && apt-get -y install\
              \ python-pip && echo \"PIP INSTALLED\"\n"
            - "fi\n"
            - "pip install --upgrade pip &> /dev/null\n"
            - "pip install awscli --ignore-installed six &> /dev/null\n"
            - "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n"
            - 'cfn-init --stack '
            - !Ref 'AWS::StackName'
            - ' --resource LibertyASLaunchConfig --configsets '
            - !If
              - UseALBSSL
              - !If
                - DeploySampleApp
                - quickstartwithSSLandSampleapp
                - quickstartwithSSL
              - !If
                - DeploySampleApp
                - quickstartwithSampleapp
                - quickstart
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - "# Signal the status from cfn-init\n"
            - 'cfn-signal -e $? --stack '
            - !Ref 'AWS::StackName'
            - ' --resource LibertyAutoScalingGroup --region '
            - !Ref 'AWS::Region'
            - "\n"
  LibertyTargetTrackingScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref 'LibertyAutoScalingGroup'
      Cooldown: '60'
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 75
  LibertyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref 'PrivateSubnet1ID'
        - !Ref 'PrivateSubnet2ID'
      Cooldown: '300'
      DesiredCapacity: !Ref 'LibertyNodesDesiredCapacity'
      TargetGroupARNs:
        - !Ref 'ALBTargetGroup'
      HealthCheckGracePeriod: '300'
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref 'LibertyASLaunchConfig'
      MaxSize: !Ref 'LibertyNodesMaxSize'
      MinSize: !Ref 'LibertyNodesMinSize'
      NotificationConfiguration:
        TopicARN: !Ref 'NotificationTopic'
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
          - autoscaling:TEST_NOTIFICATION
      Tags:
        - Key: Name
          Value: Liberty Server cluster node
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'LibertyNodesDesiredCapacity'
        Timeout: PT2H
  CloudFrontStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateCloudFrontDistribution
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/cloudfront.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        UseSSL: !If
          - UseALBSSL
          - 'Yes'
          - ''
        CloudFrontACMCertificateARN: !Ref 'CloudFrontACMCertificateARN'
        HostedZoneName: !Ref 'HostedZoneName'
        ALBDNSName: !GetAtt 'ApplicationLoadBalancer.DNSName'
        CNAMEAlias: !Ref 'LibertyCloudFrontCNAME'
  Route53Stack:
    Type: AWS::CloudFormation::Stack
    Condition: UseALBSSL
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/route53.template.yaml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        UseACMCertificate: !If
          - UseCustomCloudFrontSSL
          - 'Yes'
          - 'No'
        LibertyCloudFrontDistribution: !If
          - CreateCloudFrontDistribution
          - !GetAtt 'CloudFrontStack.Outputs.CloudFrontDomainName'
          - ''
        HostedZoneName: !Ref 'HostedZoneName'
        ALBDNSName: !GetAtt 'ApplicationLoadBalancer.DNSName'
        CanonicalHostedZoneID: !GetAtt 'ApplicationLoadBalancer.CanonicalHostedZoneID'
        CloudFrontCNAMEAlias: !Ref 'LibertyCloudFrontCNAME'
Outputs:
  WebsiteURL:
    Description: URL for newly created Liberty stack
    Value: !Join
      - ''
      - - !If
          - CreateCloudFrontDistribution
          - !GetAtt 'CloudFrontStack.Outputs.CloudFrontURL'
          - !If
            - UseALBSSL
            - !Join
              - ''
              - - https://
                - !Join
                  - ''
                  - - !Select
                      - '0'
                      - !Split
                        - .
                        - !GetAtt 'ApplicationLoadBalancer.DNSName'
                    - .
                    - !Ref 'HostedZoneName'
                    - .
            - !Join
              - ''
              - - http://
                - !GetAtt 'ApplicationLoadBalancer.DNSName'
        - !If
          - DeploySampleApp
          - /ferret
          - ''
