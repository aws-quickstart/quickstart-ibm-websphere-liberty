{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This workload template deploys an ASG behind an ELB load balancer in two private subnets. The cluster is configured to use an S3 bucket for storage **WARNING** This template creates EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPCID",
                        "PrivateSubnet1ID",
                        "PrivateSubnet2ID",
                        "PublicSubnet1ID",
                        "PublicSubnet2ID"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "KeyPairName",
                        "BastionSecurityGroupID",
                        "WorkloadInstanceType"
                    ]
                },
                {
                    "Label": {
                        "default": "Workload Nodes Configuration"
                    },
                    "Parameters": [
                        "WorkloadNodesMinSize",
                        "WorkloadNodesMaxSize",
                        "WorkloadNodesDesiredCapacity",
                        "OperatorEmail"
                    ]
                },
                {
                    "Label": {
                        "default": "Workload Storage Configuration"
                    },
                    "Parameters": [
                        "S3BucketName"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "BastionSecurityGroupID": {
                    "default": "Bastion Security Group ID"
                },
                "KeyPairName": {
                    "default": "SSH Key Name"
                },
                "OperatorEmail": {
                    "default": "Operator Email"
                },
                "PrivateSubnet1ID": {
                    "default": "Private Subnet 1 ID"
                },
                "PrivateSubnet2ID": {
                    "default": "Private Subnet 2 ID"
                },
                "PublicSubnet1ID": {
                    "default": "Public Subnet 1 ID"
                },
                "PublicSubnet2ID": {
                    "default": "Public Subnet 2 ID"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "S3BucketName": {
                    "default": "S3 Bucket Name"
                },
                "VPCID": {
                    "default": "VPC ID"
                },
                "WorkloadInstanceType": {
                    "default": "Workload Servers Instance Type"
                },
                "WorkloadNodesDesiredCapacity": {
                    "default": "Workload Nodes Desired Capacity"
                },
                "WorkloadNodesMaxSize": {
                    "default": "Workload Nodes Max Size"
                },
                "WorkloadNodesMinSize": {
                    "default": "Workload Nodes Min Size"
                }
            }
        }
    },
    "Parameters": {
        "BastionSecurityGroupID": {
            "Description": "ID of the bastion host security group to enable SSH connections (e.g., sg-7f16e910)",
            "Type": "AWS::EC2::SecurityGroup::Id"
            
        },
        "KeyPairName": {
            "Description": "Name of an existing EC2 key pair. All instances will launch with this key pair.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "OperatorEmail": {
            "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
            "ConstraintDescription": "Must be a valid email address.",
            "Description": "Email address that notifications of any scaling operations will be sent to",
            "Type": "String"
        },
        "PrivateSubnet1ID": {
            "Description": "ID of private subnet 1 in Availability Zone 1 for the Workload (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet2ID": {
            "Description": "ID of private subnet 2 in Availability Zone 2 for the Workload (e.g., subnet-b1f432cd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet1ID": {
            "Description": "ID of public subnet 1 in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet2ID": {
            "Description": "ID of public subnet 2 in Availability Zone 2 for the ELB load balancer (e.g., subnet-e3246d8e)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "examples/latest/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "S3BucketName": {
            "AllowedPattern": "^[a-z0-9][a-z0-9-.]*$",
            "Default": "type-unique-value-here-in-lowercase",
            "Description": "Name of the S3 bucket that will be created for your workload to store data. Enter a unique name that does not include uppercase characters.",
            "Type": "String"
        },
        "VPCID": {
            "Description": "ID of your existing VPC for deployment",
            "Type": "AWS::EC2::VPC::Id"
        },
        "WorkloadInstanceType": {
            "AllowedValues": [
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Default": "m4.xlarge",
            "Description": "Type of EC2 instance for the Workload instances",
            "Type": "String"
        },
        "WorkloadNodesDesiredCapacity": {
            "Default": "2",
            "Description": "The desired capacity for the Workload nodes Auto Scaling group",
            "Type": "String"
        },
        "WorkloadNodesMaxSize": {
            "Default": "4",
            "Description": "The maximum size of the Auto Scaling group",
            "Type": "String"
        },
        "WorkloadNodesMinSize": {
            "Default": "2",
            "Description": "The minimum size of the Auto Scaling group",
            "Type": "String"
        }
    },
    "Rules": {
        "KeyPairsNotEmpty": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::EachMemberEquals": [
                                    {
                                        "Fn::RefAll": "AWS::EC2::KeyPair::KeyName"
                                    },
                                    ""
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "All key pair parameters must not be empty"
                }
            ]
        },
        "SubnetsInVPC": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::EachMemberIn": [
                            {
                                "Fn::ValueOfAll": [
                                    "AWS::EC2::Subnet::Id",
                                    "VpcId"
                                ]
                            },
                            {
                                "Fn::RefAll": "AWS::EC2::VPC::Id"
                            }
                        ]
                    },
                    "AssertDescription": "All subnets must in the VPC"
                }
            ]
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "AMZNLINUXHVM": "amzn-ami-hvm-2017.09.0.20170930-x86_64-gp2"
            },
            "ap-northeast-1": {
                "AMZNLINUXHVM": "ami-2a69be4c"
            },
            "ap-northeast-2": {
                "AMZNLINUXHVM": "ami-9bec36f5"
            },
            "ap-south-1": {
                "AMZNLINUXHVM": "ami-4fc58420"
            },
            "ap-southeast-1": {
                "AMZNLINUXHVM": "ami-0797ea64"
            },
            "ap-southeast-2": {
                "AMZNLINUXHVM": "ami-8536d6e7"
            },
            "ca-central-1": {
                "AMZNLINUXHVM": "ami-fd55ec99"
            },
            "eu-central-1": {
                "AMZNLINUXHVM": "ami-c7ee5ca8"
            },
            "eu-west-1": {
                "AMZNLINUXHVM": "ami-acd005d5"
            },
            "eu-west-2": {
                "AMZNLINUXHVM": "ami-1a7f6d7e"
            },
            "sa-east-1": {
                "AMZNLINUXHVM": "ami-f1344b9d"
            },
            "us-east-1": {
                "AMZNLINUXHVM": "ami-8c1be5f6"
            },
            "us-east-2": {
                "AMZNLINUXHVM": "ami-c5062ba0"
            },
            "us-west-1": {
                "AMZNLINUXHVM": "ami-02eada62"
            },
            "us-west-2": {
                "AMZNLINUXHVM": "ami-e689729e"
            }
        }
    },
    "Resources": {
        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "OperatorEmail"
                        },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "ELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the ELB",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ApplicationLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" : {
                "Subnets" : [
                    
                    {
                         "Ref" : "PublicSubnet1ID"
                    },
                    {
                         "Ref" : "PublicSubnet2ID"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ELBSecurityGroup"
                    }
                ]
            }
        },
        "ALBListener" : {
             "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "DefaultActions" : [
                    {
                        "Type" : "forward",
                        "TargetGroupArn" : { 
                            "Ref" : "ALBTargetGroup" 
                        }
                    }
                ],
                "LoadBalancerArn" : { 
                    "Ref" : "ApplicationLoadBalancer" 
                },
                "Port" : "80",
                "Protocol" : "HTTP"
            }
        },
        "ALBTargetGroup" : {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "HealthCheckIntervalSeconds" : 30,
                "HealthCheckTimeoutSeconds" : 5,
                "HealthyThresholdCount" : 2,
                "Port" : 9080,
                "Protocol" : "HTTP",
                "UnhealthyThresholdCount" : 5,
                "VpcId" : {"Ref" : "VPCID"},
                "TargetGroupAttributes" :
                [  
                     { 
                        "Key" : "stickiness.enabled", "Value" : "true" 
                    },
                    { 
                        "Key" : "stickiness.type", "Value" : "lb_cookie" 
                    },
                    { 
                        "Key" : "stickiness.lb_cookie.duration_seconds", "Value" : "30" 
                    }
                ]
            }
        },

        "SetupRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*"
                                    },
                                    "Effect": "Allow"
                                }
                            ]
                        },
                        "PolicyName": "aws-quick-start-s3-policy"
                    },
                    {
                        "PolicyName": "WorkloadSetup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:PutMetricData",
                                        "cloudwatch:EnableAlarmActions",
                                        "cloudwatch:PutMetricAlarm"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "S3Bucket"
                                                    },
                                                    ""
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "S3Bucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "SetupRoleProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SetupRole"
                    }
                ]
            }
        },
        "WorkloadSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the Workload instances",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9080",
                        "ToPort": "9080",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "SourceSecurityGroupId": {
                            "Ref": "BastionSecurityGroupID"
                        }
                    }
                ]
            }
        },
        "WorkloadASLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {

                "AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "type": "S3",
                        "roleName": {
                            "Ref": "SetupRole"
                        },
                        "buckets": [
                            {
                                "Ref": "QSS3BucketName"
                            }
                        ]
                    }
                },
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "quickstart": [
                            "install",
                            "configure",
                            "cleanup"
                        ]
                    },
                    "install": {
                        "sources" : {
                            "/opt/websphere" : "http://repo1.maven.org/maven2/com/ibm/websphere/appserver/runtime/wlp-webProfile7/17.0.0.2/wlp-webProfile7-17.0.0.2.zip"
               
                        },
                        "files" : {
                           "/etc/profile.d/wlp.sh": {
                                "source": {
                                    "Fn::Sub": 
                                        "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/scripts/wlp.sh"
                                  
                                    
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/etc/init.d/wlp":{
                                "source": {
                                    "Fn::Sub": 
                                        "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/scripts/wlp"
                                        
                                    
                                },
                                 
                                "mode"    : "000700",
                                "owner"   : "root",
                                "group"   : "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/tmp/ferret-1.0.war": {
                                "source": "http://repo1.maven.org/maven2/net/wasdev/wlp/sample/ferret/1.0/ferret-1.0.war",
                                "mode"   : "000544",
                                "owner"  : "root",
                                "group"  : "root"
                             },
                            "/tmp/01_create_liberty_server.sh": {
                                "source": {
                                    "Fn::Sub": 
                                        "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/scripts/createServer.sh"
                                    
                                        
                                    
                                },
                
                                "mode": "000755",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"
                            },
                            "/tmp/02_configureServer.sh": {
                             "source": {
                                    "Fn::Sub": 
                                        "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/scripts/configureServer.sh"
                                        
                                    
                            },
                 
                            "mode": "000755",
                            "owner": "root",
                            "group": "root",
                            "authentication": "S3AccessCreds"
                        }
                                    
                    }   
                },
                "configure": {
                    "commands": {
                            "01_set_env": {
                                 "command": ". /etc/profile.d/wlp.sh"
                            },
                            "02_install_liberty": {
                                "command": "/tmp/01_create_liberty_server.sh"
                            },
                            "03_configure_Server": {
                                "command": "/tmp/02_configureServer.sh"
                            }
                    }
                },
                "cleanup": {}
            }
        },
        "Properties": {
            "KeyName": {
                "Ref": "KeyPairName"
            },
            "ImageId": {
                "Fn::FindInMap": [
                    "AWSAMIRegionMap",
                    {
                        "Ref": "AWS::Region"
                    },
                    "AMZNLINUXHVM"
                ]
            },
             "InstanceMonitoring": "true",
            "IamInstanceProfile": {
                "Ref": "SetupRoleProfile"
            },
            "InstanceType": {
                "Ref": "WorkloadInstanceType"
            },
            "SecurityGroups": [
                {
                    "Ref": "WorkloadSecurityGroup"
                }
            ],
            "UserData": {
                 "Fn::Base64": {
                    "Fn::Join": [
                        "",
                        [
                            "#!/bin/bash\n",
                            "export PATH=$PATH:/usr/local/bin\n",
                            "which pip &> /dev/null\n",
                            "if [ $? -ne 0 ] ; then\n",
                            "    echo \"PIP NOT INSTALLED\"\n",
                            "    [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip) && echo \"PIP INSTALLED\"\n",
                            "    [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip && echo \"PIP INSTALLED\"\n",
                            "fi\n",
                            "pip install --upgrade pip &> /dev/null\n",
                            "pip install awscli --ignore-installed six &> /dev/null\n",
                            "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                            "cfn-init --stack ",
                            {
                                "Ref": "AWS::StackName"
                            },
                            " --resource WorkloadASLaunchConfig --configsets quickstart --region ",
                            {
                                 "Ref": "AWS::Region"
                            },
                            "\n",
                            
        
                            "# Signal the status from cfn-init\n",
                            "cfn-signal -e $? --stack ",
                            {
                                "Ref": "AWS::StackName"
                            },
                            " --resource WorkloadAutoScalingGroup --region ",
                            {
                                "Ref": "AWS::Region"
                            },
                            "\n"
                        ]
                    ]
                }
            }
        }
    },
        "WorkloadScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WorkloadAutoScalingGroup"
                },
                "Cooldown": "300",
                "ScalingAdjustment": "1"
            }
        },
        "WorkloadScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WorkloadAutoScalingGroup"
                },
                "Cooldown": "300",
                "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 60% for 5 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "5",
                "Threshold": "60",
                "AlarmActions": [
                    {
                        "Ref": "WorkloadScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "WorkloadAutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 40% for 30 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "30",
                "Threshold": "40",
                "AlarmActions": [
                    {
                        "Ref": "WorkloadScaleDownPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "WorkloadAutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "WorkloadAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet1ID"
                    },
                    {
                        "Ref": "PrivateSubnet2ID"
                    }
                ],
                "Cooldown": "600",
                "DesiredCapacity": {
                    "Ref": "WorkloadNodesDesiredCapacity"
                },
                "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ],

                "HealthCheckGracePeriod": "600",
                "HealthCheckType": "EC2",
                "LaunchConfigurationName": {
                    "Ref": "WorkloadASLaunchConfig"
                },
                
                "MaxSize": {
                    "Ref": "WorkloadNodesMaxSize"
                },
                "MinSize": {
                    "Ref": "WorkloadNodesMinSize"
                },
                "NotificationConfiguration": {
                    "TopicARN": {
                        "Ref": "NotificationTopic"
                    },
                    "NotificationTypes": [
                        "autoscaling:EC2_INSTANCE_LAUNCH",
                        "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                        "autoscaling:EC2_INSTANCE_TERMINATE",
                        "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                        "autoscaling:TEST_NOTIFICATION"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Workload Server cluster node",
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "WorkloadNodesDesiredCapacity"
                    },
                    "Timeout": "PT2H"
                }
            }
        },

        "WorkloadCloudFrontDistribution" : {
            "Type" : "AWS::CloudFront::Distribution",
            "Properties" : {
                "DistributionConfig" : {
                    "Origins" : [ {
                            "DomainName" : { "Fn::GetAtt" : [ "ApplicationLoadBalancer", "DNSName" ]},
                            "Id" : "LibertyCustomOrigin",
                            "CustomOriginConfig" : {
                                "HTTPPort" : "80",
                                "HTTPSPort" : "443",
                                "OriginProtocolPolicy" : "http-only"
                            }
                    } ],
                    "Enabled" : "true",
                    "DefaultCacheBehavior" : {
                        "TargetOriginId" : "LibertyCustomOrigin",
                        "SmoothStreaming" : "false",  
                        "ForwardedValues" : {
                            "QueryString" : "true",
                            "Cookies" : { "Forward" : "all" }
                        },
                        
                        "ViewerProtocolPolicy" : "allow-all"
                    },
                   "ViewerCertificate": { "CloudFrontDefaultCertificate" : "true" }
                }
            }
        },
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Ref": "S3BucketName"
                },
                "AccessControl": "BucketOwnerFullControl"
            }
        }
    },
    "Outputs" : {
    "WebsiteURL" : {
      "Description" : "URL for newly created Liberty stack",
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "WorkloadCloudFrontDistribution", "DomainName" ]},"/ferret"]] }
    }
  }  
}